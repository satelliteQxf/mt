#!/usr/bin/env python
import optparse
import sys
from collections import defaultdict
from nltk.stem import SnowballStemmer
reload(sys)
sys.setdefaultencoding("latin-1")

optparser = optparse.OptionParser()
optparser.add_option("-d", "--data", dest="train", default="data/hansards", help="Data filename prefix (default=data)")
optparser.add_option("-e", "--english", dest="english", default="e", help="Suffix of English filename (default=e)")
optparser.add_option("-f", "--french", dest="french", default="f", help="Suffix of French filename (default=f)")
optparser.add_option("-t", "--threshold", dest="threshold", default=0.5, type="float", help="Threshold for aligning with Dice's coefficient (default=0.5)")
optparser.add_option("-n", "--num_sentences", dest="num_sents", default=sys.maxint, type="int", help="Number of sentences to use for training and alignment")
(opts, _) = optparser.parse_args()
f_data = "%s.%s" % (opts.train, opts.french)
e_data = "%s.%s" % (opts.train, opts.english)

sys.stderr.write("Training with Dice's coefficient...")
bitext = [[sentence.strip().split() for sentence in pair] for pair in zip(open(f_data), open(e_data))[:opts.num_sents]]

eng_stemmer = SnowballStemmer("english")
frn_stemmer = SnowballStemmer("french")
stem_bitext = []

for (n,(f,e)) in enumerate(bitext):
  eng_stem = [frn_stemmer.stem(word) for word in e]
  frn_stem = [eng_stemmer.stem(word.decode("utf-8")) for word in f]
  stem_bitext.append([frn_stem, eng_stem])

bitext = stem_bitext


k = 5
theta = defaultdict(float)
fe_count = defaultdict(float)
e_count = defaultdict(float)

#initialize theta_0
for(n,(f,e)) in enumerate(bitext):
  for f_i in set(f):
    for e_j in set(e):
      theta[(f_i,e_j)] = 1.0 / len(e) 

for i in range(0,k):
  #E step
  fe_count = defaultdict(float)
  e_count = defaultdict(float)
  for (n,(f,e)) in enumerate(bitext):
    for f_i in set(f):
      Z = 0
      for e_j in set(e):
        Z += theta[(f_i,e_j)]
      for e_j in set(e):
        c = 1.0 * theta[(f_i,e_j)] / Z
        fe_count[f_i,e_j] += c
        e_count[e_j] += c

  #M step
  for (k,(f_i,e_j)) in enumerate(fe_count.keys()):
    theta[(f_i,e_j)] = fe_count[(f_i,e_j)] / e_count[e_j]
# f_count = defaultdict(int)
# e_count = defaultdict(int)
# fe_count = defaultdict(int)
# for (n, (f, e)) in enumerate(bitext):
#   for f_i in set(f):
#     f_count[f_i] += 1
#     for e_j in set(e):
#       fe_count[(f_i,e_j)] += 1
#   for e_j in set(e):
#     e_count[e_j] += 1
#   if n % 500 == 0:
#     sys.stderr.write(".")

# dice = defaultdict(int)
# for (k, (f_i, e_j)) in enumerate(fe_count.keys()):
#   dice[(f_i,e_j)] = 2.0 * fe_count[(f_i, e_j)] / (f_count[f_i] + e_count[e_j])
#   if k % 5000 == 0:
#     sys.stderr.write(".")
# sys.stderr.write("\n")

for (f, e) in bitext:
  for (i, f_i) in enumerate(f):
    best_p = 0
    best_j = 0
    for (j, e_j) in enumerate(e):
      if theta[(f_i,e_j)] >= best_p:
        best_p = theta[(f_i,e_j)]
        best_j = j
    sys.stdout.write("%i-%i " % (i,best_j))
  sys.stdout.write("\n")